
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module mandelbrot_fpga_de10_nano(
  //////////// CLOCK //////////
  input                   FPGA_CLK1_50,
  input                   FPGA_CLK2_50,
  input                   FPGA_CLK3_50,
  //////////// HDMI //////////
  inout                   HDMI_I2C_SCL,
  inout                   HDMI_I2C_SDA,
  inout                   HDMI_I2S,
  inout                   HDMI_LRCLK,
  inout                   HDMI_MCLK,
  inout                   HDMI_SCLK,
  output                  HDMI_TX_CLK,
  output                  HDMI_TX_DE,
  output        [23:0]    HDMI_TX_D,
  output                  HDMI_TX_HS,
  output                  HDMI_TX_VS,
  input                   HDMI_TX_INT,
  //////////// KEY //////////
  input          [1:0]    KEY,
  //////////// LED //////////
  output         [7:0]    LED,
  //////////// SW //////////
  input          [3:0]    SW
);


//// PLLs reset ////
wire pll_rst;
assign pll_rst = !KEY[0];


//// system clock ////
localparam SYS_CLK = 200000000;

wire sys_clk_en = 1'b1;
wire sys_clk;
wire sys_pll_locked;

sys_pll sys_clock (
  .refclk     (FPGA_CLK1_50),   // refclk.clk
  .rst        (pll_rst),        // reset.reset
  .outclk_0   (sys_clk),        // outclk0.clk
  .locked     (sys_pll_locked)  // locked.export
);


//// video clock ////
localparam VGA_CLK = 25175644;

wire vga_clk_en = 1'b1;
wire vga_clk;
wire vga_pll_locked;

vga_pll vga_clock (
  .refclk     (FPGA_CLK2_50),   // refclk.clk
  .rst        (pll_rst),        // reset.reset
  .outclk_0   (vga_clk),        // outclk0.clk
  .locked     (vga_pll_locked)  // locked.export
);



//// reset ////
localparam NCK = 2;
localparam RCV = 255;

wire [ NCK-1:0] sys_rst_in;
wire            sys_rst;
wire            vga_rst;

assign sys_rst_in = {!vga_pll_locked, !sys_pll_locked};

reset #(
  .NCK    (NCK),  // number of input clocks and reset outputs, min 1
  .RCV    (RCV)   // counter max value, min 1
) sys_reset (
  .clk      ({vga_clk, sys_clk}),
  .rst_in   (sys_rst_in),
  .rst_out  ({vga_rst, sys_rst})
);


//// blinky ////
localparam BLINKY_CLK = 1;

wire blinky_out;

blinky #(
  .SYS_CLK    (SYS_CLK),    // system clock in Hz
  .BLINKY_CLK (BLINKY_CLK)  // blinky clock in Hz
) blinky (
  .clk      (sys_clk),
  .clk_en   (sys_clk_en),
  .rst      (sys_rst),
  .out      (blinky_out)
);

assign LED[0] = blinky_out;


//// mandelbrot_fpga_top module ////
localparam VW = 8; // video components data width

wire vga_hsync;
wire vga_vsync;
wire vga_vld;
wire vga_r;
wire vga_g;
wire vga_b;

mandelbrot_fpga_top mandelbrot_fpga_top (
  .sys_clk      (sys_clk   ),
  .sys_clk_en   (sys_clk_en),
  .sys_rst      (sys_rst   ),
  .vga_clk      (vga_clk   ),
  .vga_clk_en   (vga_clk_en),
  .vga_rst      (vga_rst   ),
  .vga_hsync    (vga_hsync ),
  .vga_vsync    (vga_vsync ),
  .vga_vld      (vga_vld   ),
  .vga_r        (vga_r     ),
  .vga_g        (vga_g     ),
  .vga_b        (vga_b     )
);

// temp //
assign LED[1] = vga_hsync;
assign LED[2] = vga_vsync;


//// assign unused outputs ////
assign LED[7:3] = 'd0;


endmodule

