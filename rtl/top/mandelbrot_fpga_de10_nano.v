
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module mandelbrot_fpga_de10_nano(

  //////////// CLOCK //////////
  input                   FPGA_CLK1_50,
  input                   FPGA_CLK2_50,
  input                   FPGA_CLK3_50,

  //////////// HDMI //////////
  inout                   HDMI_I2C_SCL,
  inout                   HDMI_I2C_SDA,
  inout                   HDMI_I2S,
  inout                   HDMI_LRCLK,
  inout                   HDMI_MCLK,
  inout                   HDMI_SCLK,
  output                  HDMI_TX_CLK,
  output                  HDMI_TX_DE,
  output        [23:0]    HDMI_TX_D,
  output                  HDMI_TX_HS,
  input                   HDMI_TX_INT,
  output                  HDMI_TX_VS,

  //////////// KEY //////////
  input          [1:0]    KEY,

  //////////// LED //////////
  output         [7:0]    LED,

  //////////// SW //////////
  input          [3:0]    SW
);


//// system clock ////
localparam SYS_CLK = 100000000;

wire sys_clk_en = 1'b1;
wire sys_clk;
wire sys_pll_locked;

sys_pll sys_clock (
  .refclk     (FPGA_CLK1_50),   // refclk.clk
  .rst        (1'b0),           // reset.reset
  .outclk_0   (sys_clk),        // outclk0.clk
  .locked     (sys_pll_locked)  // locked.export
);


//// reset ////
localparam NCK = 1;
localparam RCV = 255;

wire sys_rst_in;
wire sys_rst;

assign sys_rst_in = !sys_pll_locked;

reset #(
  .NCK    (NCK),  // number of input clocks and reset outputs, min 1
  .RCV    (RCV)   // counter max value, min 1
) sys_reset (
  .clk      (sys_clk),
  .rst_in   (sys_rst_in),
  .rst_out  (sys_rst)
);


//// blinky ////
localparam BLINKY_CLK = 1;

wire blinky_out;

blinky #(
  .SYS_CLK    (SYS_CLK),    // system clock in Hz
  .BLINKY_CLK (BLINKY_CLK)  // blinky clock in Hz
) blinky (
  .clk      (sys_clk),
  .clk_en   (sys_clk_en),
  .rst      (sys_rst),
  .out      (blinky_out)
);

assign LED[0] = blinky_out;


//// assign unused outputs ////
assign LED[7:1] = 1'b0;


endmodule

